#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤
"""

import os
import sys
import logging
from datetime import datetime
from typing import List, Dict, Any
import argparse

from src.data_fetcher import DataFetcher
from src.chart_generator import ChartGenerator
from src.pattern_analyzer import PatternAnalyzer
from src.report_generator import ReportGenerator
from src.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/analysis.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class ChartSnapshotAnalyzer:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤"""
    
    def __init__(self, config_path: str = "config.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.config = Config(config_path)
        self.data_fetcher = DataFetcher(self.config)
        self.chart_generator = ChartGenerator(self.config)
        self.pattern_analyzer = PatternAnalyzer(self.config)
        self.report_generator = ReportGenerator(self.config)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._create_directories()
    
    def _create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            'logs',
            'data',
            'charts',
            'reports',
            'screenshots'
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
    
    def analyze_tickers(self, tickers: List[str], timeframe: str = "1h") -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤"""
        results = {}
        
        for ticker in tickers:
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ä–∞: {ticker}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = self.data_fetcher.get_data(ticker, timeframe)
                
                if data is None or data.empty:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker}")
                    continue
                
                # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
                chart_path = self.chart_generator.create_chart(
                    ticker, data, timeframe
                )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                patterns = self.pattern_analyzer.analyze(data, ticker)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results[ticker] = {
                    'data': data,
                    'chart_path': chart_path,
                    'patterns': patterns,
                    'timestamp': datetime.now()
                }
                
                logger.info(f"–ê–Ω–∞–ª–∏–∑ {ticker} –∑–∞–≤–µ—Ä—à—ë–Ω")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {ticker}: {e}")
                continue
        
        return results
    
    def generate_reports(self, analysis_results: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        reports = []
        
        # –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–±–æ—è–º
        breakout_report = self.report_generator.generate_breakout_report(analysis_results)
        if breakout_report:
            reports.append(breakout_report)
        
        # –û—Ç—á—ë—Ç –ø–æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è–º
        divergence_report = self.report_generator.generate_divergence_report(analysis_results)
        if divergence_report:
            reports.append(divergence_report)
        
        # –û–±—â–∏–π –æ—Ç—á—ë—Ç
        general_report = self.report_generator.generate_general_report(analysis_results)
        if general_report:
            reports.append(general_report)
        
        return reports
    
    def run_analysis(self, tickers: List[str], timeframe: str = "1h") -> List[str]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä—ã
        analysis_results = self.analyze_tickers(tickers, timeframe)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã
        reports = self.generate_reports(analysis_results)
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–æ–∑–¥–∞–Ω–æ {len(reports)} –æ—Ç—á—ë—Ç–æ–≤")
        
        return reports


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤')
    parser.add_argument('--tickers', nargs='+', required=True, 
                       help='–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--timeframe', default='1h', 
                       help='–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (1m, 5m, 15m, 1h, 4h, 1d)')
    parser.add_argument('--config', default='config.yaml',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = ChartSnapshotAnalyzer(args.config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        reports = analyzer.run_analysis(args.tickers, args.timeframe)
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(args.tickers)}")
        print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {len(reports)}")
        print(f"üìÅ –û—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: reports/")
        
        for report in reports:
            print(f"  - {report}")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
